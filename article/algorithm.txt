

Algorithm:
cooperative_robots_cleaning_step():
    for each robot r:
        s = r.position
        CLEAN[s] = True
        if      a neighbour cell n has WF[n] == WF[s] and CLEAN[n] == False
        then    set_goal(n).
        else if a neighbour cell n has WF[n] in robot_range(r) and CLEAN[n] == False
        then    set_goal(n).
        else
                run BFS to find nearest tile n with CLEAN = False and WF[n] in robot_range(r).
                if   such n exists
                then set_goal(nx.shortest_path).
                else halt.

Algorithm:
create_job_division():
    s0 = find_first_point()
    sf = find_last_point()
    return bfs_multisource(s0,sf)
